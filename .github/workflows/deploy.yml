name: Deploy to ECS

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 트리거

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1   # AWS 리전
  ECR_REPOSITORY: autoeverapp  # ECR 리포지토리 이름
  ECS_TASK_DEFINITION: task-definition.json  # ECS 작업 정의 파일 경로
  CONTAINER_NAME: autoeverapp  # ECS에서 사용할 컨테이너 이름
  ECS_SERVICE: servicetest1  # ECS 서비스 이름
  ECS_CLUSTER: autoever-cluster  # ECS 클러스터 이름

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Docker 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # AWS CLI 설정
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Docker 로그인 (ECR)
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Docker 이미지 빌드하고 ECR에 푸시
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # ECS 작업 정의 업데이트
      - name: Render ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      # ECS 서비스 업데이트
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
